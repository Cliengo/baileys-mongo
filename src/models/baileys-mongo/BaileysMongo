import { PrismaClient } from '@prisma/client';
import AuthHandler from './../auth-handler/AuthHandler'
import { PrismaSingleton } from '../../db/db';

type CreateStoreResult = {
    auth: AuthHandler;
  };

export class BaileysMongo {
    static _instace = new BaileysMongo()

    private constructor() {}

    private createNewAuth = async (storeKey: string, prismaClient: PrismaClient): Promise<{auth: AuthHandler, mongoDB: PrismaClient}> => {

        try {
            let store = await prismaClient.auth.findFirst({
              where: {
                key: storeKey
              }
            })
        
            if (store == null) {
              await prismaClient.auth.create({
                data: {
                  key: storeKey,
                  value: ''
                }
              })
            }
        
            return {
              auth: new AuthHandler(prismaClient, storeKey),
              mongoDB: prismaClient
            }
          } catch (err) {
            throw new Error(`Error creating auth in mongo ---- Error: ${err}`)
          }
    }
    
    init = async (): Promise<{
        createNewAuth: (
            storeKey: string
        ) => Promise<CreateStoreResult> 
    }> => {
        const { prismaClient } = await PrismaSingleton.getInstance()

        const createAuthStore = async (storeKey: string): Promise<CreateStoreResult> => {
            const auth =  await this.createNewAuth(storeKey, prismaClient)

            return auth
        }

        return {createNewAuth: createAuthStore}
    }
}